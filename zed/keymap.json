[
  {
    "context": "Workspace",
    "bindings": {
      "cmd-shift-o": [
        "projects::OpenRecent",
        {
          "create_new_window": false
        }
      ],
      "cmd-alt-p": [
        "task::Spawn",
        { "task_name": "file_finder", "reveal_target": "center" }
      ],
      "cmd-alt-shift-o": [
        "task::Spawn",
        { "task_name": "project_finder", "reveal_target": "center" }
      ]
    }
  },

  // Window's navigation
  {
    "context": "(Dock || Terminal || Editor) && !menu && !(Picker > Editor)",
    "bindings": {
      "ctrl-w z": "workspace::ToggleZoom",
      "ctrl-q t": "terminal_panel::ToggleFocus",
      "ctrl-q p": "project_panel::ToggleFocus",
      "ctrl-q o": "outline_panel::ToggleFocus",
      "ctrl-q g": "git_panel::ToggleFocus",
      "ctrl-q a": "agent::ToggleFocus",
      "ctrl-q c": "collab_panel::ToggleFocus",
      "ctrl-q shift-C": "chat_panel::ToggleFocus",
      "ctrl-q b": "debug_panel::ToggleFocus",
      "ctrl-q d": "diagnostics::Deploy",

      // Window's motions
      "ctrl-shift-z": "workspace::ToggleZoom",
      "ctrl-shift-h": "workspace::ActivatePaneLeft",
      "ctrl-shift-l": "workspace::ActivatePaneRight",
      "ctrl-shift-k": "workspace::ActivatePaneUp",
      "ctrl-shift-j": "workspace::ActivatePaneDown",
      "ctrl-shift-left": "workspace::ActivatePaneLeft",
      "ctrl-shift-right": "workspace::ActivatePaneRight",
      "ctrl-shift-up": "workspace::ActivatePaneUp",
      "ctrl-shift-down": "workspace::ActivatePaneDown"
    }
  },

  // *** VIM Editor ***
  {
    "context": "Editor && VimControl && !menu",
    "bindings": {
      "alt-h": null, // Undefine this shortcut so that I can write the pipe character

      "cmd-shift-o": [
        "projects::OpenRecent",
        {
          "create_new_window": false
        }
      ],

      "alt-k": "editor::MoveLineUp",
      "alt-j": "editor::MoveLineDown",
      "alt-w": "vim::NextSubwordStart",
      "alt-b": "vim::PreviousSubwordStart",
      "alt-e": "vim::NextSubwordEnd",
      "cmd-alt-k": "editor::AddSelectionAbove",
      "cmd-alt-j": "editor::AddSelectionBelow", // Insert cursor below
      "ð": ["vim::PushJump", { "line": false }],

      // Pane Stuff
      "ctrl-shift-h": "workspace::ActivatePaneLeft",
      "ctrl-shift-l": "workspace::ActivatePaneRight",
      "ctrl-shift-j": "workspace::ActivatePaneDown",
      "ctrl-shift-k": "workspace::ActivatePaneUp",
      "ctrl-shift-left": "workspace::ActivatePaneLeft",
      "ctrl-shift-right": "workspace::ActivatePaneRight",
      "ctrl-shift-down": "workspace::ActivatePaneDown",
      "ctrl-shift-up": "workspace::ActivatePaneUp",

      // Leader
      "space space": "tab_switcher::Toggle",
      "space v": ["task::Spawn", { "task_name": "Preview in Skim" }],
      "space l g": [
        "task::Spawn",
        { "task_name": "LazyGit", "reveal_target": "center" }
      ],
      "space s b": "tab_switcher::ToggleAll",
      "space s f": "file_finder::Toggle",
      "space b n": "workspace::NewFile",
      "space b b": "pane::AlternateFile",
      "space b d": "pane::CloseActiveItem",
      "space b q": "pane::CloseInactiveItems",
      "space b p": "pane::TogglePinTab",
      "space i h": "editor::ToggleInlayHints",
      "space g .": "editor::GoToHunk",
      "space g ,": "editor::GoToPreviousHunk",
      "space g h": "editor::ToggleSelectedDiffHunks",
      "space g S": "git::ToggleStaged",
      "space g r": "git::Restore", // "d p"
      "space g s": "git::StageAndNext", // "d u"
      "space g u": "git::UnstageAndNext", // "d shift-u"
      "space g b": "git::Blame",
      "space g d": "git::Diff",
      "space p": "editor::GoToDiagnostic",
      "space shift-p": "editor::GoToPreviousDiagnostic",
      "space h": "editor::Hover",

      // Brackets are in a bad place in IS keyboards
      "´ ´": "vim::NextSectionStart",
      "´ æ": "vim::NextSectionEnd",
      "æ æ": "vim::PreviousSectionStart",
      "æ ´": "vim::PreviousSectionEnd",
      "´ m": "vim::NextMethodStart",
      "´ shift-m": "vim::NextMethodEnd",
      "æ m": "vim::PreviousMethodStart",
      "æ shift-m": "vim::PreviousMethodEnd",
      "æ *": "vim::PreviousComment",
      "æ /": "vim::PreviousComment",
      "´ *": "vim::NextComment",
      "´ /": "vim::NextComment",
      "æ -": "vim::PreviousLesserIndent",
      "æ +": "vim::PreviousGreaterIndent",
      "æ =": "vim::PreviousSameIndent",
      "´ -": "vim::NextLesserIndent",
      "´ +": "vim::NextGreaterIndent",
      "´ =": "vim::NextSameIndent",
      "´ b": "pane::ActivateNextItem",
      "æ b": "pane::ActivatePreviousItem",
      "´ shift-b": "pane::ActivateLastItem",
      "æ shift-b": ["pane::ActivateItem", 0],
      "´ space": "vim::InsertEmptyLineBelow",
      "æ space": "vim::InsertEmptyLineAbove"
    }
  },

  {
    "context": "vim_operator == a || vim_operator == i || vim_operator == cs",
    "bindings": {
      // Traditional Vim behavior
      "Q": "vim::AnyQuotes",
      "B": "vim::AnyBrackets",

      // mini.ai plugin behavior
      "q": "vim::MiniQuotes",
      "b": "vim::MiniBrackets"
    }
  },

  // Visual Vim mode
  {
    "context": "vim_mode == visual",
    "bindings": {
      "v": "editor::SelectLargerSyntaxNode",
      "V": "editor::SelectSmallerSyntaxNode",
      "ctrl-s": ["vim::PushAddSurrounds", {}],
      "shift-x": "vim::Exchange"
    }
  },

  {
    "context": "(vim_mode == normal || vim_mode == visual) && !VimCount",
    "bindings": {
      "^": "vim::StartOfLine",
      "0": "vim::FirstNonWhitespace",
      "s": "vim::PushSneak",
      "shift-s": "vim::PushSneakBackward"
    }
  },

  {
    "context": "vim_mode == insert",
    "bindings": {
      "j k": "vim::NormalBefore",
      "alt-w": "vim::NextSubwordStart",
      "alt-e": "vim::NextSubwordEnd",
      "alt-b": "vim::PreviousSubwordStart"
    }
  },

  // *** Extension Based Configurations ***
  // Elixir
  {
    "context": "Editor && (extension==ex || extension==exs)",
    "bindings": {
      "alt-a": [
        "task::Spawn",
        {
          "task_name": "Fawkes: Choose alternate target",
          "reveal_target": "center"
        }
      ]
    }
  },

  // Text based
  {
    "context": "Editor && !VimCount && (vim_mode == normal || vim_mode == visual) && (extension==md || extension==typ || extension==qmd)",
    "bindings": {
      "j": ["vim::Down", { "display_lines": true }],
      "k": ["vim::Up", { "display_lines": true }]
    }
  },

  // R Code
  {
    "context": "Editor && extension==R",
    "bindings": {
      "ctrl-shift-m": ["workspace::SendKeystrokes", "space |> space"],
      "alt--": ["workspace::SendKeystrokes", "space < - space"]
    }
  },

  // Cell mode for jupyter
  {
    "context": "extension==R || extension==py",
    "bindings": {
      "ctrl-alt-i": ["workspace::SendKeystrokes", "\n# space %%\n"]
    }
  }
]
